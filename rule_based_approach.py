# -*- coding: utf-8 -*-
"""rule based approach.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Bc2e-xG7CjN6XJQA74Guu734dYR7rkx
"""

!pip install indic-nlp-library  # Install the library
import os

# Download the resources (if you haven't already)
!git clone https://github.com/anoopkunchukuttan/indic_nlp_resources.git

# Set the INDIC_RESOURCES_PATH environment variable
os.environ["INDIC_RESOURCES_PATH"] = os.path.join(os.getcwd(), "indic_nlp_resources")

# Now import the necessary modules
from indicnlp.tokenize import sentence_tokenize  # Changed import statement
from indicnlp.tokenize import indic_tokenize  # Changed import statement

# Tokenize sentences manually without Indic NLP
def tokenize_tamil(paragraph):
    sentences = paragraph.split(".")

    # Remove whitespace and split sentences into words
    tokenized_sentences = [sentence.strip().split(" ") for sentence in sentences if sentence.strip()]
    return tokenized_sentences


# Improved rules for Subject-Verb Agreement
def is_subject_verb_agreement_correct(subject, verb):
    # Simplified gender/number agreement logic
    if subject.endswith("அவன்") or subject.endswith("அவள்"):
        # Masculine singular (அவன்) should match with "ன்", Feminine singular (அவள்) should match with "ள்"
        if subject.endswith("அவன்") and not verb.endswith("ன்"):
            return False  # Masculine singular mismatch
        if subject.endswith("அவள்") and not verb.endswith("ள்"):
            return False  # Feminine singular mismatch
    return True

# Improved rules for Tense Detection
def is_tense_correct(temporal_adverb, verb):
    # Match adverb and verb tense
    if temporal_adverb == "நேற்று" and not verb.endswith("ன்"):
        return False  # Past tense mismatch
    if temporal_adverb == "இன்று" and not verb.endswith("கிறார்"):
        return False  # Present tense mismatch
    if temporal_adverb == "நாளை" and not verb.endswith("போவார்"):
        return False  # Future tense mismatch
    return True

# Detect Errors and Correct Them
def process_paragraph(paragraph):
    sentences = tokenize_tamil(paragraph)
    corrected_sentences = []

    for sentence in sentences:
        temporal_adverb = None
        subject, verb = None, None

        # Search for subject, verb, and temporal adverb
        for word in sentence:
            # Example: Identify temporal adverbs
            if word in ["நேற்று", "இன்று", "நாளை"]:
                temporal_adverb = word
            # Example: Basic subject and verb identification (expand rules here)
            if word.endswith("அவன்") or word.endswith("அவள்"):
                subject = word
            if word.endswith("ன்") or word.endswith("ள்") or word.endswith("கிறார்"):
                verb = word

        # Correct subject-verb agreement if both are found
        if subject and verb:
            if not is_subject_verb_agreement_correct(subject, verb):
                if subject.endswith("அவன்"):
                    verb = verb[:-1] + "ன்"  # Correct to masculine singular
                elif subject.endswith("அவள்"):
                    verb = verb[:-1] + "ள்"  # Correct to feminine singular

        # Correct tense errors if both are found
        if temporal_adverb and verb:
            if not is_tense_correct(temporal_adverb, verb):
                if temporal_adverb == "நேற்று":
                    verb = verb[:-2] + "ன்"  # Past tense correction
                elif temporal_adverb == "இன்று":
                    verb = verb[:-2] + "கிறார்"  # Present tense correction
                elif temporal_adverb == "நாளை":
                    verb = verb[:-2] + "போவார்"  # Future tense correction

        # Reconstruct sentence with corrections
        corrected_sentence = " ".join(
            [word if word not in [subject, verb] else (subject if word == subject else verb) for word in sentence]
        )
        corrected_sentences.append(corrected_sentence)

    corrected_paragraph = " ".join(corrected_sentences)
    return corrected_paragraph

# Process Input File and Save Output
def process_file(input_file, output_file):
    if not os.path.exists(input_file):
        print(f"Input file '{input_file}' does not exist.")
        return

    # Read input file
    with open(input_file, 'r', encoding='utf-8') as f:
        input_paragraph = f.read()

    # Process the paragraph
    corrected_paragraph = process_paragraph(input_paragraph)

    # Write corrected paragraph to output file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(corrected_paragraph)

    print(f"Corrected paragraph saved to '{output_file}'.")

# Upload input file and run the code
from google.colab import files

# Upload file
uploaded = files.upload()

# Check if file is uploaded and then process it
input_file = list(uploaded.keys())[0]
output_file = "corrected_paragraph.txt"

# Process the file
process_file(input_file, output_file)

# Download the output file
files.download(output_file)